h1. Introduction

mongomorphism provides a simple interface to MongoDB that mimics the standard python dictionary. In this sense it represents an "isomorphism" between a MongoDB document and a python dictionary. In addition, mongomorphism also supports ACID-like transactions on top of MongoDB by using the python "transaction":http://zodb.readthedocs.org/en/latest/transactions.html package, and provides a thin "ORM" layer allowing you to define your models as python objects.

h1. Usage

h3. To use as a "data manager":http://zodb.readthedocs.org/en/latest/transactions.html#data-managers for the python "transaction":http://zodb.readthedocs.org/en/latest/transactions.html package:

bc. from mongomorphism.datamanager import MongoDocument
from mongomorphism.config import *
import transaction

bc. dbname = 'test_db'
session = Session(dbname)
colname = 'my_collection'
doc = MongoDocument(session, colname, retrieve={'name':'Sid'}) # automatically joins the current transaction
doc['location'] = 'San Francisco'
transaction.commit()

h3. To use like an "ORM":

bc. from mongomorphism.orm import MongoObject
from mongomorphism.config import *
import transaction

bc. # define your models by extending MongoObject
class User(MongoObject):
    __collection__ = 'users'
    __requiredfields__ = ('name','location')

bc. dbname = 'test_db'
session = Session(dbname)
user = User(session, retrieve={'name':'Sid'}) # automatically joins the current transaction
user['location'] = 'San Francisco'
transaction.commit()
