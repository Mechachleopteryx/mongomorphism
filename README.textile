h1. Introduction

mongomorphism provides a simple interface to MongoDB that mimics the standard python dictionary (it strives to be an "isomorphism" between a MongoDB document and a python dictionary). In addition, mongomorphism supports ACID-like transactions on top of MongoDB by using the python "transaction":http://zodb.readthedocs.org/en/latest/transactions.html package, and provides a thin "ORM" layer allowing you to define your models as python objects. The underlying pymongo connection may be used for more complex operations.

h3. Features:

* Provides transaction-like semantics (all-or-nothing commit behavior)
* Provides basic ORM functionality while still remaining schema-free
* Transparent support for Mongo references (DBRefs):

bc. doc1['friend'] = doc2 # doc2 is stored as a DBRef

* Transparent support for arbitrary objects as values (not just dicts, lists, and other BSON data)

bc. myobj = SomeClass()
doc1['obj'] = myobj # behind the scenes, this instance will be serialized to JSON in mongodb when committed

bc. print doc1['obj'] # later when retrieved from the db, this will automatically deserialize to the python object

h1. Usage

h3. Transactional:

bc. from mongomorphism.datamanager import MongoDocument
from mongomorphism.config import *
import transaction

bc. dbname = 'test_db'
session = Session(dbname)
colname = 'my_collection'
doc = MongoDocument(session, colname, retrieve={'name':'Sid'}) # automatically joins the current transaction
doc['location'] = 'San Francisco'
transaction.commit()

Note: This mode operates by implementing a "data manager":http://zodb.readthedocs.org/en/latest/transactions.html#data-managers for the python "transaction":http://zodb.readthedocs.org/en/latest/transactions.html package.

h3. Non-transactional:

bc. from mongomorphism.datamanager import MongoDocument
from mongomorphism.config import *

bc. dbname = 'test_db'
session = Session(dbname, transactional=False)
colname = 'my_collection'
doc = MongoDocument(session, colname, retrieve={'name':'Sid'})
doc['location'] = 'San Francisco'
doc.save()

h3. To use as an "ORM":

bc. from mongomorphism.orm import MongoObject
from mongomorphism.config import *
import transaction

bc. # define your models by extending MongoObject
class User(MongoObject):
    __collection__ = 'users'
    __requiredfields__ = ('name','location')

bc. dbname = 'test_db'
session = Session(dbname)
user = User(session, retrieve={'name':'Sid'}) # automatically joins the current transaction
user['location'] = 'San Francisco'
transaction.commit()

You could also use the ORM in non-transactional mode similar to the previous example. That is, create the session with transactional=False, and then call save() when you want to persist the object.
